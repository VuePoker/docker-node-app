# === Should only contain the variables for the Makefile ====
# === Do not make changes unless you know what you are doing!. ====
# === If you make changes here you may break the current build. ====

.DEFAULT_GOAL := help

# Defaults
PROJECT ?= default

DOCKER_BIN := docker
DOCKER_COMPOSE_BIN := docker-compose
GIT_BIN := git

LABEL_SCHEMA_SPEC_VERSION ?= 1.0
BUILD_COMMIT ?= $(shell $(GIT_BIN) --git-dir ./.git log -1 --format=%h 2> /dev/null)
DOCKER_BUILD_VERSION ?= $(shell $(GIT_BIN) --git-dir ./.git describe 2> /dev/null)
DOCKER_BUILD_DATE ?= $(date -u +'%Y-%m-%dT%H:%M:%SZ')
DOCKER_NETWORK_DRIVER ?= bridge

APP_COMMIT ?= $(shell $(GIT_BIN) --git-dir workspace/app/.git log -1 --format=%h 2> /dev/null)
APP_VERSION ?= $(shell $(GIT_BIN) --git-dir workspace/app/.git describe 2> /dev/null)

DOCKER_UID = $(shell id -u)
DOCKER_GID = $(shell id -g)

#
# Detect operating system
#

OS_NAME :=
OS_FLAG := 

ifeq '$(findstring ;,$(PATH))' ';'
    OS_NAME += windows
	OS_FLAG += -D WIN32
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		OS_FLAG += AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		OS_FLAG += IA32
	endif
else
    UNAME_OS := $(shell uname 2>/dev/null || echo Unknown)
    UNAME_OS := $(patsubst CYGWIN%,Cygwin,$(UNAME_OS))
    UNAME_OS := $(patsubst MSYS%,MSYS,$(UNAME_OS))
    UNAME_OS := $(patsubst MINGW%,MSYS,$(UNAME_OS))
endif

ifeq ($(OS),Windows_NT)
    OS_NAME += windows
	OS_FLAG += -D WIN32
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		OS_FLAG += AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		OS_FLAG += IA32
	endif
else
	ifeq ($(UNAME_OS),Linux)
	    OS_NAME += linux
		OS_FLAG += LINUX
	endif
	ifeq ($(UNAME_OS),Solaris)
	    OS_NAME += solaris
		OS_FLAG += Solaris
	endif
	ifeq ($(UNAME_OS),Darwin)
	    OS_NAME += osx
		OS_FLAG += OSX
	endif
		UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		OS_FLAG += AMD64
	endif
		ifneq ($(filter %86,$(UNAME_P)),)
	OS_FLAG += IA32
		endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		OS_FLAG += ARM
	endif
endif

OS_NAME := $(strip $(OS_NAME))

#
# If the OS is OSX determine whether the current version is Catalina (10.15.0) or greater.
# Currently, OSX Catalina is the most recent version and apple has made some changes which require a slightly different
# setup to make the NFS mounts work.
#
# Related files:
# compose/os/osx/dev.yaml
# compose/os/osx-catalina/dev.yaml
# workbench/bin/setup-nfs-osx.sh
#

OSX_CATALINA_OR_GREATER :=
OSX_CATALINA := "10.15.0"
ifeq ($(OS_NAME),osx)
	OSX_CATALINA_OR_GREATER := $(shell workbench/bin/osx-version-check.sh ${OSX_CATALINA})
endif

